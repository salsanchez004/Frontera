<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        Store
* GENERATION DATE:  03.06.2019
* CLASS FILE:       /home/vmasideason/public_html/sql_class_generator/generated_classes/Store.php
* FOR MYSQL TABLE:  TBL_STORE
* FOR MYSQL DB:     vmasidea_frontera
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.vmasideas.com
* -------------------------------------------------------
*
*/

require_once (__dir__ . "/Utils.php");
require_once (__dir__ . "/City.php");
require_once (__dir__ . "/Store_category.php");

// **********************
// CLASS DECLARATION
// **********************

class Store implements JsonSerializable
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************

	private $id_store;   // KEY ATTR. WITH AUTOINCREMENT

	private $name;   // (normal Attribute)
	private $Category;   // (normal Attribute)
	private $address;   // (normal Attribute)
	private $latitude;   // (normal Attribute)
	private $longitude;   // (normal Attribute)
	private $creation_time;   // (normal Attribute)
	private $City;   // (normal Attribute)
	private $status;   // (normal Attribute)
	
	private $Products;
	
	
	public function asignaProductos()
	{
		global $log,$db,$IP;
		try 
		{
			$db->where("id_store",$this->id_store);
			$store_query=$db->get("TBL_PRODUCT_STORE");
			for($i=0; $i<count($store_query);$i++) 
			{
				$this->Products[] = new Product($store_query[$i]["id_product"]);
			}
		}
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.asignaProductos. ".$ex); 
            throw $ex;
        }
	}
	
	
	// **********************
	// CONSTRUCTOR METHOD
	// **********************

	public function __construct()
	{
		$a = func_get_args();
		$i = func_num_args();
		if (method_exists($this, $f = '__construct' . $i)) {
			call_user_func_array(array($this, $f), $a);
		}
	}

	public function __construct8($name,$id_category_store,$address,$latitude,$longitude,$creation_time,$id_city,$status)
	{
        try 
		{
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a __construct8");   
            $this->name = $name;
			$this->Category = new Store_category($id_category_store);
			$this->address = $address;
			$this->latitude = $latitude;
			$this->longitude = $longitude;
			$this->creation_time = $creation_time;
			$this->City = new City($id_city,0);
			$this->status = $status;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.INICIA.Store ".$ex); 
            throw $ex;
        }
    }


	
	/**
     * Constructor
     * @abstract Se recibe el id del para obtener los demas de datos de db
     * @param id id del objeto a construir
     */
    public function __construct1($id) 
	{
        try 
		{
				global $log,$db,$IP;
				$this->id_store = $id;
				$db->where("id_store",Utils::convUtf8($this->id_store));
				$obj = $db->get('TBL_STORE');
				if ($db->count > 0)
				{		
					$this->name = $obj[0]["name"];
					$this->Category = new Store_category($obj[0]["id_category_store"]);
					$this->address = $obj[0]["address"];
					$this->latitude = $obj[0]["latitude"];
					$this->longitude = $obj[0]["longitude"];
					$this->creation_time = $obj[0]["creation_time"];
					$this->City = new City($obj[0]["id_city"],0);
					$this->status = $obj[0]["status"];
					$this->Products=array();
				}
				else
				{
					$log->trace("[$IP] Obj de clase Store no encontrada: ".$id); 
						
				}
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Store.__construct1 ".$ex); 
            throw $ex;
        }
    }
	
	// **********************
	// GETTER METHODS
	// **********************

	function getId_store()
	{
		return $this->id_store;
	}

	function getName()
	{
		return $this->name;
	}

	function getCategory()
	{
		return $this->Category;
	}

	function getAddress()
	{
		return $this->address;
	}

	function getLatitude()
	{
		return $this->latitude;
	}

	function getLongitude()
	{
		return $this->longitude;
	}

	function getCreation_time()
	{
		return $this->creation_time;
	}

	function getCity()
	{
		return $this->City;
	}

	function getStatus()
	{
		return $this->status;
	}

	// **********************
	// SETTER METHODS
	// **********************

	function setId_store($val)
	{
		$this->id_store =  $val;
	}

	function setName($val)
	{
		$this->name =  $val;
	}

	function setCategory($val)
	{
		$this->Category =  $val;
	}

	function setAddress($val)
	{
		$this->address =  $val;
	}

	function setLatitude($val)
	{
		$this->latitude =  $val;
	}

	function setLongitude($val)
	{
		$this->longitude =  $val;
	}

	function setCreation_time($val)
	{
		$this->creation_time =  $val;
	}

	function setCity($val)
	{
		$this->City =  $val;
	}

	function setStatus($val)
	{
		$this->status =  $val;
	}

	/**
     * save
     * @abstract Metodo para guardar un objeto nuevo
    */
    public function save()
	{
        try 
		{
            // creamos objeto de base datos
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a Store.save");     	
			
			$data = Array (
			   	"name" => $this->name,
				"id_category_store" => $this->Category->getId_cat_store(),
				"address" => $this->address,
				"latitude" => $this->latitude,
				"longitude" => $this->longitude,
				"creation_time" => $this->creation_time,
				"id_city" => $this->City->getId_city(),
				"status" => $this->status
				);
				 	
			$id = $db->insert ('TBL_STORE', $data);
			
			if($id)
			{
				$this->id_store = $id;
				return true;
			}
			else
				return false;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Store.save ".$ex); 
            throw new Exception('Ocurrio un error al guardar los datos del objeto Store: '.$db->getLastError());
        }
    }
	
	/**
     * update
     * @abstract Metodo para realizar la actualizacion de los datos de un objeto
    */
    public function update()
	{
        try {
            
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a Store.update");    
            $data = Array (
			   	"name" => $this->name,
				"id_category_store" => $this->Category->getId_cat_store(),
				"address" => $this->address,
				"latitude" => $this->latitude,
				"longitude" => $this->longitude,
				"creation_time" => $this->creation_time,
				"id_city" => $this->City->getId_city(),
				"status" => $this->status
				);
			$db->where("id_store",$this->id_store);	
			
			if($db->update ('TBL_STORE', $data))
			{				
				return true;
			}
				
			else
				 throw new Exception('Error al actualizar los datos del objeto : '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Store.update ".$ex); 
            throw $ex;
        }
    }
	
	/**
     * deactivate
     * @abstract Metodo para realizar la desactivacion del objeto
     */
    public function deactivate() {
        try {
			global $log,$db,$IP;
			$data = Array (
			   "status" => "2"
				);
			$db->where("id_store",$this->id_store);	
			if($db->update ('TBL_STORE', $data))
				return true;
			else
				 throw new Exception('Error al desactivar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.Store.deactivate ".$ex);
             throw $ex;
        }
    }  
	
	
	/**
     * activate
     * @abstract Metodo para realizar la activación de la habitación
     */
    public function activate() 
	{
        try {
			global $log,$db,$IP;
			$data = Array (
			   "status" => "1"
				);
			$db->where("id_store",$this->id_store);	
			if($db->update ('TBL_STORE', $data))
				return true;
			else
				 throw new Exception('Error al activar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.Store.activate ".$ex);
             throw $ex;
        }
    }  

	
	/**
     * Serializacion de objeto
     */
    public function jsonSerialize()
    {
        return [
				"id_store" => $this->id_store,
				"name" => $this->name,
				"Category" => $this->Category,
				"address" => $this->address,
				"latitude" => $this->latitude,
				"longitude" => $this->longitude,
				"creation_time" => $this->creation_time,
				"City" => $this->City,
				"status" => $this->status,
				"Products" => $this->Products
        ];
    }


} // class : end

?>