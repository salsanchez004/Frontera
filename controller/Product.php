<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        Product
* GENERATION DATE:  03.06.2019
* CLASS FILE:       /home/vmasideason/public_html/sql_class_generator/generated_classes/Product.php
* FOR MYSQL TABLE:  TBL_PRODUCT
* FOR MYSQL DB:     vmasidea_frontera
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.vmasideas.com
* -------------------------------------------------------
*
*/

require_once (__dir__ . "/Utils.php");
require_once (__dir__ . "/Image.php");
require_once (__dir__ . "/Product_category.php");

// **********************
// CLASS DECLARATION
// **********************

class Product implements JsonSerializable
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************

	private $id_product;   // KEY ATTR. WITH AUTOINCREMENT

	private $name;   // (normal Attribute)
	private $description;   // (normal Attribute)
	private $Category;   // (normal Attribute)
	private $grammage;   // (normal Attribute)
	private $status;   // (normal Attribute)
	private $creation_time;   // (normal Attribute)
	private $images;
	
	private $thumb_path;
	
	// **********************
	// CONSTRUCTOR METHOD
	// **********************

	public function __construct()
	{
		$a = func_get_args();
		$i = func_num_args();
		if (method_exists($this, $f = '__construct' . $i)) {
			call_user_func_array(array($this, $f), $a);
		}
	}

	public function __construct6($name,$description,$id_category,$grammage,$status,$creation_time)
	{
        try 
		{
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a __construct6");   
            $this->name = $name;
			$this->description = $description;
			$this->Category = new Product_category($id_category, 0);
			$this->grammage = $grammage;
			$this->status = $status;
			$this->creation_time = $creation_time;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.INICIA.Product ".$ex); 
            throw $ex;
        }
    }


	
	/**
     * Constructor
     * @abstract Se recibe el id del para obtener los demas de datos de db
     * @param id id del objeto a construir
     */
    public function __construct1($id) 
	{
        try 
		{
				global $log,$db,$IP;
				$this->id_product = $id;
				$db->where("id_product",Utils::convUtf8($this->id_product));
				$obj = $db->get('TBL_PRODUCT');
				if ($db->count > 0)
				{		
					$this->name = $obj[0]["name"];
					$this->description = $obj[0]["description"];
					$this->Category = new Product_category($obj[0]["id_category"],0);
					$this->grammage = $obj[0]["grammage"];
					$this->status = $obj[0]["status"];
					$this->creation_time = $obj[0]["creation_time"];
					$this->thumb_path = $obj[0]["img_thumb"];
					
					
					
					$db->where("id_product", $this->id_product);
					$imagenes = $db->get("TBL_IMAGE");
					for($i=0; $i<count($imagenes); $i++) {
						$this->images[] = new Image($imagenes[$i]["id_image"]);
					}
				}
				else
				{
					$log->trace("[$IP] Obj de clase Product no encontrada: ".$id); 
						
				}
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Product.__construct1 ".$ex); 
            throw $ex;
        }
    }
	
	// **********************
	// GETTER METHODS
	// **********************

	function getId_product()
	{
		return $this->id_product;
	}

	function getName()
	{
		return $this->name;
	}

	function getDescription()
	{
		return $this->description;
	}

	function getCategory()
	{
		return $this->Category;
	}

	function getGrammage()
	{
		return $this->grammage;
	}

	function getStatus()
	{
		return $this->status;
	}

	function getCreation_time()
	{
		return $this->creation_time;
	}
	
	function getImages()
	{
		return $this->images;
	}

	// **********************
	// SETTER METHODS
	// **********************

	function setId_product($val)
	{
		$this->id_product =  $val;
	}

	function setName($val)
	{
		$this->name =  $val;
	}

	function setDescription($val)
	{
		$this->description =  $val;
	}

	function setCategory($val)
	{
		$this->Category =  $val;
	}

	function setGrammage($val)
	{
		$this->grammage =  $val;
	}

	function setStatus($val)
	{
		$this->status =  $val;
	}

	function setCreation_time($val)
	{
		$this->creation_time =  $val;
	}
	
	function setImages($val)
	{
		$this->images =  $val;
	}

	/**
     * save
     * @abstract Metodo para guardar un objeto nuevo
    */
    public function save()
	{
        try 
		{
            // creamos objeto de base datos
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a Product.save");     	
			
			$data = Array (
			   	"name" => $this->name,
				"description" => $this->description,
				"id_category" => $this->Category->getId_category(),
				"grammage" => $this->grammage,
				"status" => $this->status,
				"creation_time" => $this->creation_time
				);
				 	
			$id = $db->insert ('TBL_PRODUCT', $data);
			
			if($id)
			{
				$this->id_product = $id;
				
				for($i=0; $i<count($this->images); $i++) {
					$this->images[$i]->setId_product($this->id_product);
					$this->images[$i]->save();
				}
				
				return true;
			}
			else
				return false;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Product.save ".$ex); 
            throw new Exception('Ocurrio un error al guardar los datos del objeto Product: '.$db->getLastError());
        }
    }
	
	/**
     * update
     * @abstract Metodo para realizar la actualizacion de los datos de un objeto
    */
    public function update()
	{
        try {
            
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a Product.update");    
            $data = Array (
			   	"name" => $this->name,
				"description" => $this->description,
				"id_category" => $this->Category->getId_category(),
				"grammage" => $this->grammage,
				"status" => $this->status,
				"creation_time" => $this->creation_time
				);
			$db->where("id_product",$this->id_product);	
			
			if($db->update ('TBL_PRODUCT', $data))
			{				
				return true;
			}
				
			else
				 throw new Exception('Error al actualizar los datos del objeto : '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.Product.update ".$ex); 
            throw $ex;
        }
    }
	
	/**
     * deactivate
     * @abstract Metodo para realizar la desactivacion del objeto
     */
    public function deactivate() {
        try {
			global $log,$db,$IP;
			$data = Array (
			   "status" => "2"
				);
			$db->where("id_product",$this->id_product);	
			if($db->update ('TBL_PRODUCT', $data))
				return true;
			else
				 throw new Exception('Error al desactivar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.Product.deactivate ".$ex);
             throw $ex;
        }
    }  
	
	
	/**
     * activate
     * @abstract Metodo para realizar la activación de la habitación
     */
    public function activate() 
	{
        try {
			global $log,$db,$IP;
			$data = Array (
			   "status" => "1"
				);
			$db->where("id_product",$this->id_product);	
			if($db->update ('TBL_PRODUCT', $data))
				return true;
			else
				 throw new Exception('Error al activar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.Product.activate ".$ex);
             throw $ex;
        }
    }  

	
	/**
     * Serializacion de objeto
     */
    public function jsonSerialize()
    {
        return [
				"id_product" => $this->id_product,
				"name" => $this->name,
				"description" => $this->description,
				"Category" => $this->Category,
				"grammage" => $this->grammage,
				"status" => $this->status,
				"creation_time" => $this->creation_time,
				"thumb_path" => $this->thumb_path
			
        ];
    }


} // class : end

?>